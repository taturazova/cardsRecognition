import cv2
import numpy as np
import json
from tensorflow import keras
import matplotlib.pyplot as plt

# Read card info
with open("card_data.json", "r") as file:
    card_list = json.load(file)

# Read Image
image = cv2.imread("testImages/3cards_dark_vertical.jpg")
# convert the image to grayscale format
img_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# apply binary thresholding
ret, thresh = cv2.threshold(img_gray, 150, 255, cv2.THRESH_BINARY)

# detect the contours on the binary image using cv2.CHAIN_APPROX_NONE
contours, hierarchy = cv2.findContours(
    image=thresh, mode=cv2.RETR_TREE, method=cv2.CHAIN_APPROX_SIMPLE
)

# draw contours on the original image for contours with no parents
image_copy = image.copy()
roi = None
cards = []
for i, h in enumerate(hierarchy[0]):
    if h[3] == -1:  # contour has no parent
        # Use polygon approximation to simplify the contour
        epsilon = 0.02 * cv2.arcLength(contours[i], True)
        approx = cv2.approxPolyDP(contours[i], epsilon, True)
        area = cv2.contourArea(contours[i])
        if len(approx) == 4 and area > 1000:
            rect = cv2.minAreaRect(approx)
            center, (w, h), angle = rect
            aspect_ratio = max(w, h) / min(w, h)

            if 1.2 < aspect_ratio < 1.8:
                # Draw the approximated polygon on the original image
                cv2.drawContours(image, [approx], 0, (0, 255, 0), 2)
                cv2.imshow("image", cv2.resize(image, (0, 0), fx=0.5, fy=0.5))
                cv2.waitKey(0)
                # Create a destination image with the same data type
                box = cv2.boxPoints(rect)  # Convert from Box2D structure to 4 points
                dst_img = np.zeros((int(h), int(w)), dtype=np.uint8)


for roi in cards:
    cv2.imshow("image", roi)
    cv2.waitKey(0)
    roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
    roi = cv2.resize(roi, (180, 180))
    roi = roi.astype("float") / 255.0  # Normalize pixel values

    roi = np.reshape(roi, (1, roi.shape[0], roi.shape[1], 1))

    # Load the saved model from the .h5 file
    model = keras.models.load_model("10epochs_conv.h5")

    # Make predictions using the loaded model
    predictions = model.predict(roi)

    # Decode the predictions (assuming your model output is categorical)
    class_index = np.argmax(predictions) % 78

    # Print the predicted class
    print(
        f'Predicted Class: {card_list[(class_index % 78)]["name"]}\nCard Meaning: {card_list[class_index]["keywords"]}'
    )
